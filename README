This repo contains implementation of PHP editor features (i.e. syntax highlighting,
content assist, code validation) for Eclipse's Orion. It's a Google Summer of Code 2011 project.
You can find both Orion plugin and server-side code (in a form of Eclipse's plugin) here.


Directories info:

* orion-client-php-plugin - Orion plugin for client-side php editor features,
  (syntax highlighting, communication client-server for content assist, etc)
* orion-server-php-plugin - server-side plugin (bundle) providing required
  functionality for client-side plugins, utilizes PDT
* patches - diff files that were submitted to Orion bugzilla for particular
  features like Linked Mode, Multi-Mode Syntax Highlighting etc


INSTALLING (applies to Orion 0.2 RC3)

The plugin will be installed in permament manner, i.e. it won't be removed if you
clear your storage (localStorage.clear()).

Note that the plugin cannot be yet installed on any server just by providing the
plugin URL, because some files need to be replaced on server until Orion will
support particular features. Currently these are:
- /web/css/default-theme.css (Orion doesn't provide a way to add custom styles yet)
- /web/orion/editor/textMateStyler.js (multi-mode syntax highlighting)
- /web/edit/setup.js (multi-mode syntax highlighting)
- /web/orion/editor/htmlGrammar.js (usage of above by PHP plugin)
- /web/plugins/webEditingPlugin.html (usage of above by PHP plugin)

Note to above: mutli-mode syntax highlighting patch was accepted by Orion, and
this feature is now (with some modifications) available in trunk. However, to
make Orion highlight both PHP and HTML in .php files, a modification to the latter
two files had to be done, which is not in trunk as it's plugin-specific. Most
likely it'll be solved differently by Orion devs in the future.


This installaction instructions are meant only for beta testing purposes. It's
assumed that you know how to install Orion on your own machine.

To install phpEditingPlugin in your own Orion server:

I. Part 1 (all dirs relative to orion-client-php-plugin)
  1. Put org.eclipse.orion.client.core/web/css/default-theme.css in a place of
     the same file in org.eclipse.orion.client.core bundle in your Orion server
     installation
  2. Put files from org.eclipse.orion.client.core/web/plugins/phpEditingPlugin.html
     into web/plugins/ folder in org.eclipse.orion.client.core bundle
  3. Put org.eclipse.orion.client.core/web/edit/setup.js into /web/edit/ folder
     in org.eclipse.orion.client.core bundle
  4. Put all files from org.eclipse.orion.client.editor/web/orion/editor/ into
     web/orion/editor/ folder in org.eclipse.orion.client.editor bundle
  5. Edit web/defaults.pref file in org.eclipse.orion.client.core bundle in your
     Orion server installation. Add a line "/plugins/phpEditingPlugin.html":true
  6. You might need to issue localStorage.clear() in JS console
  7. Orion will now syntax highlighting PHP files

II. Part 2 (all dirs relative to orion-server-php-plugin)
  1. Edit web/edit/edit.html file in org.eclipse.orion.client.core bundle and replace
     require(["built-edit"]) with require(["edit"]) around line 44 if applicable
  2. Edit bundles.info file from configuration/org.eclipse.equinox.simpleconfigurator
     in your Orion server installation and add eu.gusak.orion.php plugin to the
     list as well as it's dependencies. See the sample file in eclipse/configuration
     directory of this repo for example
  3. Create a directory on server and upload eu.gusak.orion.php plugin (jar file)
     from this repo as well as all dependencies (not included). Make sure to match
     the paths defined in bundles.info file
  4. Edit plugin.xml file in plugins/org.eclipse.orion.server.configurator on
     your Orion server installation so the PhpServlet from eu.gusak.orion.php
     plugin can be found (see example included in the repo - also the MANIFEST.MF)
  5. Start osgi server and check if the plugin is visible using command:
     ss eu.gusak.orion.php
  6. If the status is <<LAZY>>, start the plugin using command start ID, where
     the plugin ID can be found in the output of previous command
  7. Now the plugin should be started and the content assist feature should be
     available in the editor (to invoke press ctrl+space)
